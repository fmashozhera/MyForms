// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MyForms.Tests.Domain.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TableField")]
    public partial class TableFieldFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "TableField.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TableField", @"Tests for the table field type. Test the following:
1. You can create a table field and the specified constructor arguments are properly assigned to the properties
2. You can successfully add a column to the table field
3. You cannot add more columns than the specified number of columns
4. You can successfuly create a row
5. you can successfuly add a table cell", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a table field header and footer")]
        [NUnit.Framework.CategoryAttribute("FieldTypes")]
        [NUnit.Framework.TestCaseAttribute("\'table header\'", "\'table footer\'", "10", null)]
        public async System.Threading.Tasks.Task CreateATableFieldHeaderAndFooter(string header, string footer, string numberOfColumns, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FieldTypes"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("header", header);
            argumentsOfScenario.Add("footer", footer);
            argumentsOfScenario.Add("numberOfColumns", numberOfColumns);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a table field header and footer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 12
 await testRunner.GivenAsync(string.Format("The user wants to create a table field with header {0}", header), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("footer {0}", footer), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("number of columns {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.WhenAsync("they create the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
 await testRunner.ThenAsync(string.Format("its number of columns must equal {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 17
 await testRunner.AndAsync(string.Format("its header must be {0}", header), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync(string.Format("its footer must be {0}", footer), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a table field with no header")]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\'table footer\'", "10", null)]
        public async System.Threading.Tasks.Task CreateATableFieldWithNoHeader(string header, string footer, string numberOfColumns, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("header", header);
            argumentsOfScenario.Add("footer", footer);
            argumentsOfScenario.Add("numberOfColumns", numberOfColumns);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a table field with no header", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
 await testRunner.GivenAsync("The user wants to create a table field with no header", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
 await testRunner.AndAsync(string.Format("footer {0}", footer), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync(string.Format("number of columns {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.WhenAsync("they create the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
 await testRunner.ThenAsync(string.Format("its number of columns must equal {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
 await testRunner.AndAsync(string.Format("its header must be {0}", header), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
 await testRunner.AndAsync(string.Format("its footer must be {0}", footer), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a table field with no footer")]
        [NUnit.Framework.TestCaseAttribute("\'table header\'", "\"\"", "10", null)]
        public async System.Threading.Tasks.Task CreateATableFieldWithNoFooter(string header, string footer, string numberOfColumns, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("header", header);
            argumentsOfScenario.Add("footer", footer);
            argumentsOfScenario.Add("numberOfColumns", numberOfColumns);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a table field with no footer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.GivenAsync("The user wants to create a table field with no footer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
 await testRunner.AndAsync(string.Format("header {0}", header), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
 await testRunner.AndAsync(string.Format("number of columns {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.WhenAsync("they create the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.ThenAsync(string.Format("its number of columns must equal {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
 await testRunner.AndAsync(string.Format("its header must be {0}", header), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.AndAsync(string.Format("its footer must be {0}", footer), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a table field with no footer and no header")]
        [NUnit.Framework.TestCaseAttribute("\"\"", "\"\"", "10", null)]
        public async System.Threading.Tasks.Task CreateATableFieldWithNoFooterAndNoHeader(string header, string footer, string numberOfColumns, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("header", header);
            argumentsOfScenario.Add("footer", footer);
            argumentsOfScenario.Add("numberOfColumns", numberOfColumns);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a table field with no footer and no header", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 49
 await testRunner.GivenAsync("The user wants to create a table field with no footer and no header", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
 await testRunner.AndAsync(string.Format("number of columns {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
 await testRunner.WhenAsync("they create the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
 await testRunner.ThenAsync(string.Format("its number of columns must equal {0}", numberOfColumns), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
 await testRunner.AndAsync(string.Format("its header must be {0}", header), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.AndAsync(string.Format("its footer must be {0}", footer), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
