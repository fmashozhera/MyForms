// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyForms.Data;

namespace MyForms.Data.Migrations
{
    [DbContext(typeof(MyFormsDbContext))]
    [Migration("20200327122629_Initial Setup")]
    partial class InitialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("myForms.Core.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormSectionId");

                    b.ToTable("Fields");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Field");
                });

            modelBuilder.Entity("myForms.Core.FieldConstraint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldConstraint");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FieldConstraint");
                });

            modelBuilder.Entity("myForms.Core.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Form");
                });

            modelBuilder.Entity("myForms.Core.FormSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormSections");
                });

            modelBuilder.Entity("myForms.Core.ListFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListFieldId");

                    b.ToTable("ListFieldValues");
                });

            modelBuilder.Entity("myForms.Core.MultiSelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MultiSelectFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultiSelectFieldId");

                    b.ToTable("MultiSelectValue");
                });

            modelBuilder.Entity("myForms.Core.ListField", b =>
                {
                    b.HasBaseType("myForms.Core.Field");

                    b.HasDiscriminator().HasValue("ListField");
                });

            modelBuilder.Entity("myForms.Core.MultiSelectField", b =>
                {
                    b.HasBaseType("myForms.Core.Field");

                    b.Property<bool>("AllowMultipleValues")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("MultiSelectField");
                });

            modelBuilder.Entity("myForms.Core.SimpleField", b =>
                {
                    b.HasBaseType("myForms.Core.Field");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SimpleField");
                });

            modelBuilder.Entity("myForms.Core.DateRangeConstraint", b =>
                {
                    b.HasBaseType("myForms.Core.FieldConstraint");

                    b.Property<DateTime>("Maximum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Minimum")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DateRangeConstraint");
                });

            modelBuilder.Entity("myForms.Core.FieldNumericConstraint", b =>
                {
                    b.HasBaseType("myForms.Core.FieldConstraint");

                    b.Property<int>("NumericBound")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("FieldNumericConstraint");
                });

            modelBuilder.Entity("myForms.Core.StringRegularExpressionConstraint", b =>
                {
                    b.HasBaseType("myForms.Core.FieldConstraint");

                    b.Property<string>("Regex")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("StringRegularExpressionConstraint");
                });

            modelBuilder.Entity("myForms.Core.ComplexForm", b =>
                {
                    b.HasBaseType("myForms.Core.Form");

                    b.HasDiscriminator().HasValue("ComplexForm");
                });

            modelBuilder.Entity("myForms.Core.SubForm", b =>
                {
                    b.HasBaseType("myForms.Core.Form");

                    b.Property<Guid>("ComplexFormId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ComplexFormId");

                    b.HasDiscriminator().HasValue("SubForm");
                });

            modelBuilder.Entity("myForms.Core.Field", b =>
                {
                    b.HasOne("myForms.Core.FormSection", "FormSection")
                        .WithMany("Fields")
                        .HasForeignKey("FormSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myForms.Core.FieldConstraint", b =>
                {
                    b.HasOne("myForms.Core.Field", "Field")
                        .WithMany("FieldConstraints")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myForms.Core.FormSection", b =>
                {
                    b.HasOne("myForms.Core.Form", "Form")
                        .WithMany("FormSections")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myForms.Core.ListFieldValue", b =>
                {
                    b.HasOne("myForms.Core.ListField", "ListField")
                        .WithMany("Values")
                        .HasForeignKey("ListFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myForms.Core.MultiSelectValue", b =>
                {
                    b.HasOne("myForms.Core.MultiSelectField", "MultiSelectField")
                        .WithMany("Values")
                        .HasForeignKey("MultiSelectFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myForms.Core.SubForm", b =>
                {
                    b.HasOne("myForms.Core.ComplexForm", "ComplexForm")
                        .WithMany("SubForms")
                        .HasForeignKey("ComplexFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
